package com.icsusa.cayenne.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.DateProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;
import org.joda.time.LocalDateTime;

/**
 * Class _JodaEntity was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _JodaEntity extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String TIME_UPDATED_PROPERTY = "timeUpdated";
    public static final String SOME_STRING_PROPERTY = "someString";

    public static final String ID_PK_COLUMN = "id";

    public static final DateProperty<LocalDateTime> TIME_UPDATED = PropertyFactory.createDate("timeUpdated", LocalDateTime.class);
    public static final StringProperty<String> SOME_STRING = PropertyFactory.createString("someString", String.class);

    protected LocalDateTime timeUpdated;
    protected String someString;


    public void setTimeUpdated(LocalDateTime timeUpdated) {
        beforePropertyWrite("timeUpdated", this.timeUpdated, timeUpdated);
        this.timeUpdated = timeUpdated;
    }

    public LocalDateTime getTimeUpdated() {
        beforePropertyRead("timeUpdated");
        return this.timeUpdated;
    }

    public void setSomeString(String someString) {
        beforePropertyWrite("someString", this.someString, someString);
        this.someString = someString;
    }

    public String getSomeString() {
        beforePropertyRead("someString");
        return this.someString;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "timeUpdated":
                return this.timeUpdated;
            case "someString":
                return this.someString;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "timeUpdated":
                this.timeUpdated = (LocalDateTime)val;
                break;
            case "someString":
                this.someString = (String)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.timeUpdated);
        out.writeObject(this.someString);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.timeUpdated = (LocalDateTime)in.readObject();
        this.someString = (String)in.readObject();
    }

}
